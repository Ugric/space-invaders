<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Bullet {" line1="    position: number;" line2="    elevation: number;" line3="    direction: number;" line4="" line5="    constructor(startPos: number, elevation: number, direction: number) {" line6="        this.position = startPos;" line7="        this.elevation = elevation;" line8="        this.direction = direction;" line9="    }" line10="" line11="    nextPos() {" line12="        this.elevation += this.direction;" line13="    }" line14="" line15="    getPosition() {" line16="        return this.position;" line17="    }" line18="}" numlines="19"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class SpaceShip {" line1="    position: number;" line2="    elevation: number;" line3="" line4="    constructor() { }" line5="" line6="    moveLeft() {" line7="        this.position--;" line8="        if (this.position &lt; 0) {" line9="            this.position = 0;" line10="        }" line11="    }" line12="" line13="    moveRight() {" line14="        this.position++;" line15="        if (this.position &gt; 4) {" line16="            this.position = 4;" line17="        }" line18="    }" line19="" line20="    moveDown() {" line21="        this.elevation++;" line22="    }" line23="" line24="    getPosition() {" line25="        return this.position;" line26="    }" line27="}" numlines="28"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Invader extends SpaceShip {" line1="" line2="    constructor(startPos: number, elevation: number) {" line3="        super();" line4="        this.position = startPos;" line5="        this.elevation = elevation;" line6="    }" line7="" line8="    nextDirection() {" line9="" line10="    }" line11="}" numlines="12"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Player extends SpaceShip {" line1="    lives: number;" line2="" line3="    constructor() {" line4="        super();" line5="        this.lives = 2;" line6="        this.position = 2;" line7="        this.elevation = 4;" line8="    }" line9="" line10="    kill() {" line11="        this.lives--;" line12="    }" line13="}" numlines="14"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class SpaceInvaders {" line1="" line2="    // Holds the player and the eneimies" line3="    player: Player;" line4="    enemies: Array&lt;Invader&gt;;" line5="" line6="    // Hold their bullets" line7="    playerBullets: Array&lt;Bullet&gt;;" line8="    enemyBullets: Array&lt;Bullet&gt;;" line9="" line10="    // Decreases as the round gets faster" line11="    roundSpeed: number;" line12="" line13="    // Indicates if the player was shot that round" line14="    playerShot: boolean;" line15="" line16="    // Stores when the player last shot a bullet" line17="    playerLastShot: number;" line18="" line19="    // Indicates the direction the invaders will move next" line20="    invaderDirection: number;" line21="" line22="    // Stores if the current round is running" line23="    running: boolean;" line24="" line25="    // Stores if we won this round" line26="    win: boolean;" line27="" line28="    constructor() {" line29="        this.roundSpeed = 20;" line30="        this.makeRound();" line31="    }" line32="" line33="    /**" line34="     * Initilises all the entites" line35="     * for the start of a round" line36="     */" line37="    makeRound() {" line38="        this.player = new Player();" line39="        this.enemies = [];" line40="        this.running = true;" line41="        this.win = false;" line42="        this.enemyBullets = [];" line43="        this.playerBullets = [];" line44="        this.playerLastShot = -5000;" line45="        this.invaderDirection = 0;" line46="        this.makeEnemies();" line47="    }" line48="" line49="    /**" line50="     * Creates a pattern on enemies" line51="     */" line52="    makeEnemies() {" line53="        for (let i = 1; i &lt; 4; i++) {" line54="            for (let j = 0; j &lt; 2; j++) {" line55="                this.enemies.push(new Invader(i, j));" line56="            }" line57="        }" line58="    }" line59="" line60="    leftPressed() {" line61="        if (this.running) {" line62="            this.player.moveLeft();" line63="            this.draw();" line64="        }" line65="    }" line66="" line67="    rightPressed() {" line68="        if (this.running) {" line69="            this.player.moveRight();" line70="            this.draw();" line71="        }" line72="    }" line73="" line74="    /**" line75="     * Run when a player presses the shoot button" line76="     */" line77="    shootPressed() {" line78="        // The player can shoot faster as the rounds increase" line79="        if ((game.currentTime() - this.playerLastShot) &gt; (2000 / (21 - this.roundSpeed)) &amp;&amp; this.running) {" line80="            let position = this.player.position;" line81="            let elevation = this.player.elevation;" line82="" line83="            // We make a bullet for their position" line84="            this.playerBullets.push(" line85="                new Bullet(position, elevation, -1)" line86="            );" line87="" line88="            // And save when they last shot" line89="            this.playerLastShot = game.currentTime();" line90="            this.draw();" line91="        }" line92="" line93="    }" line94="" line95="    /**" line96="     * Randomly shoots from an invader on the screen" line97="     */" line98="    enemyShoot() {" line99="        let enemy3: Invader = this.enemies.get(Math.random()*(this.enemies.length));" line100="        this.enemyBullets.push(new Bullet(enemy3.position, enemy3.elevation, 1));" line101="    }" line102="" line103="    /**" line104="     * Draws all of the entities to the screen" line105="     */" line106="    draw() {" line107="        basic.clearScreen();" line108="        led.plot(this.player.position, this.player.elevation);" line109="" line110="        for (let k = 0; k &lt; this.playerBullets.length; k++) {" line111="            let bullet: Bullet = this.playerBullets.get(k);" line112="            led.plot(bullet.position, bullet.elevation);" line113="        }" line114="" line115="        for (let l = 0; l &lt; this.enemyBullets.length; l++) {" line116="            let bullet2: Bullet = this.enemyBullets.get(l);" line117="            led.plot(bullet2.position, bullet2.elevation);" line118="        }" line119="" line120="        for (let m = 0; m &lt; this.enemies.length; m++) {" line121="            let enemy: Invader = this.enemies.get(m);" line122="            led.plot(enemy.position, enemy.elevation);" line123="        }" line124="    }" line125="" line126="    /**" line127="     * Moves the invaders to their next position" line128="     */" line129="    tickInvaders() {" line130="        let newDirection: boolean = false;" line131="        let dead: boolean = false;" line132="" line133="        for (let n = 0; n &lt; this.enemies.length; n++) {" line134="            let enemy2: Invader = this.enemies.get(n);" line135="" line136="            switch (this.invaderDirection) {" line137="                case 0:" line138="                    enemy2.position--;" line139="                    break;" line140="                case 1:" line141="                    enemy2.elevation++;" line142="                    break;" line143="                case 2:" line144="                    enemy2.position++;" line145="                    break;" line146="                case 3:" line147="                    enemy2.elevation++;" line148="                    break;" line149="            }" line150="" line151="            if (enemy2.position &gt; 3 || enemy2.position &lt; 1) {" line152="                newDirection = true;" line153="            } else if (enemy2.elevation &gt; 3) {" line154="                dead = true;" line155="            }" line156="        }" line157="" line158="        if (newDirection) {" line159="            this.invaderDirection = (this.invaderDirection + 1) % 4;" line160="        }" line161="" line162="        if (dead) {" line163="            this.playerShot = false;" line164="            this.running = false;" line165="        } else {" line166="            this.draw();" line167="        }" line168="    }" line169="" line170="    /**" line171="     * Moves all bullets to their next positions" line172="     * and checks for deaths" line173="     */" line174="    tickBullets() {" line175="        let removeBullets: Array&lt;Bullet&gt; = [];" line176="" line177="        for (let o = 0; o &lt; this.playerBullets.length; o++) {" line178="            let bullet3: Bullet = this.playerBullets.get(o);" line179="" line180="            let died: Array&lt;Invader&gt; = [];" line181="" line182="            for (let p = 0; p &lt; this.enemies.length; p++) {" line183="                let enemy4: Invader = this.enemies.get(p);" line184="                if (bullet3.position == enemy4.position &amp;&amp;" line185="                    bullet3.elevation == enemy4.elevation) {" line186="" line187="                    removeBullets.push(bullet3);" line188="                    died.push(enemy4);" line189="                } else if (bullet3.elevation &gt; 4) {" line190="                    removeBullets.push(bullet3);" line191="                }" line192="            }" line193="" line194="            for (let q = 0; q &lt; died.length; q++) {" line195="                this.enemies.removeElement(died.get(q));" line196="            }" line197="            bullet3.nextPos();" line198="        }" line199="" line200="        for (let r = 0; r &lt; removeBullets.length; r++) {" line201="            this.playerBullets.removeElement(removeBullets.get(r));" line202="        }" line203="" line204="        removeBullets = [];" line205="" line206="        for (let s = 0; s &lt; this.enemyBullets.length; s++) {" line207="            let bullet4: Bullet = this.enemyBullets.get(s);" line208="" line209="            if (this.player.elevation == bullet4.elevation &amp;&amp;" line210="                this.player.position == bullet4.position) {" line211="                removeBullets.push(bullet4);" line212="                this.player.kill();" line213="                this.playerShot = true;" line214="" line215="            } else if (bullet4.elevation &gt; 4) {" line216="                removeBullets.push(bullet4);" line217="            }" line218="" line219="            bullet4.nextPos();" line220="        }" line221="" line222="        for (let t = 0; t &lt; removeBullets.length; t++) {" line223="            this.playerBullets.removeElement(removeBullets.get(t));" line224="        }" line225="" line226="        if (this.enemies.length &lt; 1) {" line227="            this.running = false;" line228="            this.win = true;" line229="        }" line230="" line231="        this.draw();" line232="    }" line233="" line234="    /**" line235="     * Game main loop runs the rounds and performs" line236="     * each of the required ticks" line237="     */" line238="    mainLoop() {" line239="        while (this.roundSpeed &gt; 0) {" line240="            let tickNum = 0;" line241="            while (this.running) {" line242="                spaceInvaders.draw();" line243="                tickNum++;" line244="                this.tickBullets();" line245="                if (!(tickNum % this.roundSpeed)) {" line246="                    this.tickInvaders();" line247="                }" line248="" line249="                if (!(Math.random()*1 * this.roundSpeed)) {" line250="                    this.enemyShoot();" line251="                }" line252="" line253="                basic.pause(250);" line254="" line255="                if (this.playerShot) {" line256="                    this.running = false;" line257="                    for (let u = 0; u &lt; 3; u++) {" line258="                        led.unplot(this.player.position, this.player.elevation);" line259="                        basic.pause(500);" line260="                        led.plot(this.player.position, this.player.elevation);" line261="                        basic.pause(500);" line262="                    }" line263="" line264="                    if (this.player.lives &gt; -1) {" line265="                        this.running = true;" line266="                    }" line267="" line268="                    this.playerShot = false;" line269="                }" line270="            }" line271="            basic.pause(250);" line272="            basic.clearScreen();" line273="" line274="            if (this.win) {" line275="                basic.showNumber(21 - this.roundSpeed);" line276="                basic.pause(2000);" line277="                this.roundSpeed--;" line278="                this.makeRound();" line279="                this.running = false;" line280="                this.draw();" line281="                basic.pause(1000);" line282="                this.running = true;" line283="            } else {" line284="                basic.showNumber(21 - this.roundSpeed);" line285="                basic.showString(&quot;Game over...&quot;);" line286="                return;" line287="            }" line288="        }" line289="    }" line290="}" numlines="291"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let spaceInvaders = new SpaceInvaders();" numlines="1" declaredvars="spaceInvaders"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="spaceInvaders.mainLoop();" numlines="1"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="device_button_event" x="1219" y="20"><field name="NAME">Button.A</field><comment pinned="false" h="80" w="160">Set up inputs</comment><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="spaceInvaders.leftPressed();" numlines="1"></mutation></block></statement></block><block type="device_button_event" x="1628" y="20"><field name="NAME">Button.B</field><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="spaceInvaders.rightPressed();" numlines="1"></mutation></block></statement></block><block type="device_button_event" x="2047" y="20"><field name="NAME">Button.AB</field><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="spaceInvaders.shootPressed();" numlines="1"></mutation></block></statement></block></xml>